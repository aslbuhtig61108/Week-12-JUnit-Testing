import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.junit.jupiter.params.provider.Arguments.arguments;
import static org.mockito.Mockito.spy;

import java.util.stream.Stream;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

class TestDemoTest {

	private TestDemo testDemo;
	
	
	@BeforeEach
	void setUp() throws Exception {
		testDemo = new TestDemo();
		
	}

	@ParameterizedTest
	@MethodSource("TestDemoTest#argumentsForAddPositive")
	void assertThatTwoPositiveNumbersAreAddedCorrectly(int a, int b, int expected, boolean expectException) {
	
		
		// Given: Two positive integers when added returns a positive integer
		if(!expectException) {

		// When: The method validates the two integers are positive (meaning both are greater than zero)
			assertThat(testDemo.addPositive(a, b)).isEqualTo(expected);
		} else {

		// Then: The sum is returned, otherwise, an exception is thrown (when an integer is less than zero)
			assertThatThrownBy(() -> testDemo.addPositive(a, b)).isInstanceOf(IllegalArgumentException.class);
		}
	}
	
	static Stream<Arguments> argumentsForAddPositive() {
		
		// @formatter:off
		return Stream.of(
			arguments(5, 6, 11, false),
			arguments(2, 4, 6, false),
			arguments(3, 6, 9, false),
			arguments(1, -7, 8, true),
			arguments(0, 4, 4, true),
			arguments(-2, 7, 5, true)
		);
		// @formatter:on
	}

	@Test
	void assertThatNumberSquaredIsCorrect() {
		TestDemo mockDemo = spy(testDemo);
		
		doReturn(5).when(mockDemo).getRandomInt();
	}
	
	
	
}
